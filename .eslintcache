[{"/Users/2mac/Desktop/github-projects/todo-app/src/index.js":"1","/Users/2mac/Desktop/github-projects/todo-app/src/App.js":"2","/Users/2mac/Desktop/github-projects/todo-app/src/reportWebVitals.js":"3","/Users/2mac/Desktop/github-projects/todo-app/src/components/Form.js":"4","/Users/2mac/Desktop/github-projects/todo-app/src/components/TodoList.js":"5","/Users/2mac/Desktop/github-projects/todo-app/src/components/Todo.js":"6"},{"size":500,"mtime":1610371405927,"results":"7","hashOfConfig":"8"},{"size":2347,"mtime":1611864671160,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1610371405929,"results":"10","hashOfConfig":"8"},{"size":2891,"mtime":1611864517565,"results":"11","hashOfConfig":"8"},{"size":714,"mtime":1610703848545,"results":"12","hashOfConfig":"8"},{"size":3055,"mtime":1611598854036,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"5nbf6m",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/Users/2mac/Desktop/github-projects/todo-app/src/index.js",[],["29","30"],"/Users/2mac/Desktop/github-projects/todo-app/src/App.js",["31"],"import React, {useState, useEffect} from \"react\";\nimport './App.css';\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n    const [inputText, setInputText] = useState('');\n    const [todos, setTodos] = useState([]);\n    const [status, setStatus] = useState('all');\n    const [filteredTodos, setFilteredTodos] = useState([]);\n    const [priority, setPriority] = useState('1')\n\n    useEffect(() => {\n        filterHandler();\n    }, [status, todos])\n    const filterHandler = () => {\n        switch (status) {\n            case 'completed':\n                setFilteredTodos(todos.filter(todo => todo.completed));\n                break;\n            case 'uncompleted':\n                setFilteredTodos(todos.filter(todo => !todo.completed));\n                break;\n            case 'name':\n                setFilteredTodos(todos.sort(function (a,b){\n                    if (a.text > b.text){\n                        return -1;\n                    } if (a.text < b.text){\n                        return 1;\n                    }\n                    return 0;\n                }));\n                break;\n            case 'priority':\n                setFilteredTodos(todos.sort(function (a,b){\n                    if (a.priority > b.priority){\n                        return 1;\n                    } if (a.priority < b.priority){\n                        return -1;\n                    }\n                    return 0;\n                }));\n                break;\n            default:\n                setFilteredTodos(todos);\n                break;\n        }\n    }\n    return (\n        <div className=\"App\">\n            <header>\n                <h1>Vrindavan's todo list</h1>\n            </header>\n            <Form\n                setInputText={setInputText}\n                todos={todos}\n                setTodos={setTodos}\n                inputText={inputText}\n                setStatus={setStatus}\n                priority={priority}\n                setPriority={setPriority}\n            />\n            <TodoList\n                todos={todos}\n                setTodos={setTodos}\n                filteredTodos={filteredTodos}\n                inputText={inputText}\n                setInputText={setInputText}\n                priority={priority}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","/Users/2mac/Desktop/github-projects/todo-app/src/reportWebVitals.js",[],"/Users/2mac/Desktop/github-projects/todo-app/src/components/Form.js",[],"/Users/2mac/Desktop/github-projects/todo-app/src/components/TodoList.js",[],"/Users/2mac/Desktop/github-projects/todo-app/src/components/Todo.js",["32","33"],"import React, {useState} from 'react';\n\nconst Todo = ({text, todos, todo, setTodos}) => {\n        const [editItem, setEditItem] = useState(false);\n\n        const deleteHandler = () => {\n            setTodos(todos.filter(el => el.id !== todo.id))\n        }\n        const completeHandler = () => {\n            setTodos(todos.map(item => {\n                if (item.id === todo.id) {\n                    return {\n                        ...item, completed: !item.completed\n\n                    }\n                }\n                return item;\n            }))\n        }\n        const showEditField = () => {\n            setTodos(todos.map(item => {\n                if (item.id === todo.id) {\n                    return {\n                        ...item, edit: !item.edit\n                    }\n                }\n                return item;\n            }))\n        }\n        const editRecord = (e) => {\n            e.preventDefault();\n            setTodos(todos.map(item => {\n                if (item.id === todo.id) {\n                    return {\n                        ...item, text: e.target.value\n                    }\n                }\n                return item;\n            }))\n        }\n\n        return (\n            <>\n                <div className='todo'>\n                    {todo.priority === '1' && <div className='priority green'></div>}\n                    {todo.priority === '2' && <div className='priority orange'></div>}\n                    {todo.priority === '3' && <div className='priority red'></div>}\n                    {!todo.edit ? <>\n                            <li className={`todo-item ${todo.completed && 'completed'}`}>{text}</li>\n                            <button onClick={completeHandler} className='complete-btn'>\n                                <i className='fas fa-check'></i>\n                            </button>\n                            <button className='edit-btn' onClick={showEditField}><i className='fas fa-pen'></i></button>\n                            <button onClick={deleteHandler} className='trash-btn'>\n                                <i className='fas fa-trash'></i>\n                            </button>\n                        </>\n                        : ''}\n\n                    {todo.edit &&\n                    <form className='edit-form'>\n                        <input value={todo.text} className='edit-field' type=\"text\" placeholder='please edit your record'\n                               onChange={editRecord}/>\n                        <div>\n                            <button className=\"save-edit-btn\" onClick={showEditField}>\n                                <i className=\"fas fa-wrench\"></i>\n                            </button>\n                            <button className=\"cancel-edit-btn\" onClick={showEditField}>\n                                <i className=\"far fa-window-close\"></i>\n                            </button>\n                        </div>\n                    </form>\n                    }\n                </div>\n            </>\n        );\n    }\n;\n\nexport default Todo;",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":15,"column":8,"nodeType":"40","endLine":15,"endColumn":23,"suggestions":"41"},{"ruleId":"42","severity":1,"message":"43","line":4,"column":16,"nodeType":"44","messageId":"45","endLine":4,"endColumn":24},{"ruleId":"42","severity":1,"message":"46","line":4,"column":26,"nodeType":"44","messageId":"45","endLine":4,"endColumn":37},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filterHandler'. Either include it or remove the dependency array.","ArrayExpression",["49"],"no-unused-vars","'editItem' is assigned a value but never used.","Identifier","unusedVar","'setEditItem' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [filterHandler, status, todos]",{"range":"52","text":"53"},[482,497],"[filterHandler, status, todos]"]